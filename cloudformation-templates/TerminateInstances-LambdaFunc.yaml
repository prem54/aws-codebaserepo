AWSTemplateFormatVersion: 2010-09-09
Description: "Lambda function to terminate instances with their Name or Id"

Parameters:
  LambdaExecutionRole:
    Description: Select the environment
    Type: String
    Default: arn:aws:iam::255825787063:role/service-role/stopEC2Instance-role-a47pwcfc

Resources:
  TerminateInstances:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Lambda function to terminate instances with their Name or Id"
      Handler: index.handler
      Runtime: nodejs12.x
      FunctionName: TerminateInstances-LambdaFunc
      Timeout: '8'
      Role: !Ref LambdaExecutionRole
      MemorySize: 128
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          var response = require('cfn-response');
          exports.handler = async (event, context) => {
              if(event.RequestType == "Delete"){
                  return await response.send(event, context, "SUCCESS");
              }
              try {
                  console.log("RECEIVED EVENT:\n", JSON.stringify(event, null, 2));
                  return await handleEc2TerminateEvent(event, context, event.ResourceProperties.region, event.ResourceProperties.instanceIdName, event.ResourceProperties.terminateBy);
              } catch (e) {
                  throw e;
              }
          };
          async function handleEc2TerminateEvent(event, context, region, instanceIdName, terminateBy) {
              var responseStatus = "FAILED";
              const responseData = {};
              try {
                  const ec2 = new AWS.EC2({region});
                  if (instanceIdName) {
                      const ec2InstanceIds = await getInstanceIds(ec2, instanceIdName, terminateBy);
                      if(ec2InstanceIds && ec2InstanceIds.length !== 0){
                          await ec2.terminateInstances({ InstanceIds: ec2InstanceIds }).promise();
                          responseData['Terminated-InstanceIds'] = ec2InstanceIds;
                          responseStatus = "SUCCESS";
                      }else{
                          responseData['Error-Msg']="Please check if Instance Id or Name is correct and Instance is in running state!!!";
                      }
                  }
              } catch (e) {
                  throw e;
              }
              return await response.send(event,context,responseStatus,responseData);
          }
          async function getInstanceIds(ec2, instanceIdName, terminateBy) {
              try {
                  const filters = [{
                      Name: "instance-state-name",
                      Values: [
                          'running','stopped'
                      ]
                  }];
                  if(terminateBy == 'INSTANCE_NAME'){
                      filters.push({
                          Name: "tag:Name",
                          Values: [
                              instanceIdName
                          ]
                      })
                  }else{
                      filters.push({
                          Name: "instance-id",
                          Values: [
                              instanceIdName
                          ]
                      })
                  }
                  const ec2Instances = await ec2.describeInstances({
                      Filters: filters
                  }).promise();
                  const instanceIds = [];
                  for (const reservation of ec2Instances.Reservations) {
                      for (const instance of reservation.Instances) {
                          instanceIds.push(instance.InstanceId)
                      }
                  }
                  return instanceIds;
              } catch (e) {
                  throw e;
              }
          }